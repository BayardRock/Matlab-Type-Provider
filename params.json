{"name":"F# Matlab Type Provider","tagline":"A (not yet complete) Type Provider for Matlab in the spirit of the R Type Provider","body":"### What to expect\r\n\r\nThe goal of this project is to provide a smooth and efficient framework for F#-Matlab interactions.  The goals for 1.0 include support for most Maltab functions and types in as well typed a manner as possible.\r\n\r\nThis type provider is currently highly unstable and under heavy work.  You should probably just wait a week or two for it to stabilize more before using it in any professional sense. \r\n\r\n### Current Requirements\r\n\r\n* Matlab 2013a\r\n* Visual Studio 2012\r\n\r\n### Current Capabilities\r\n\r\n* Access non-complex Values, Matrices and Vectors in a strongly typed fashion. \r\n* The ability to call Matlab Toolbox functions with appropriate F# values\r\n\r\n### Known Problems / Future Work\r\n\r\n* The current communication interface is COM, and I expect this puts a limit on the size of things.  I hope to be moving to the dll interface once I get things going a bit more.  In the long run I'd very much like to be able to support MacOS and Linux.\r\n* The Matlab 2013a requirement is due to the frequent use of strjoin.  Once stable I'd like to find another way of making these calls work.\r\n* Currently any call to a Matlab function will return all of its result values, even the optional ones.  I'm currently exploring several approaches to resolving this.\r\n* Functions with a variable number of arguments are not currently supported.\r\n* Toolbox naming is a bit wonky.  Ideally I'd like them to exist as nested namespaces.\r\n* The type provider does not currently take any static parameters.  I'd like it to support \r\n\r\n### Planned Limitations\r\n\r\n* The result of calls to Matlab functions will be untyped for the foreseeable future.  As it currently stands, there seems be no way to provide types for Matlab functions without manual labeling.\r\n\r\n\r\n### Getting Started\r\n\r\nAdd the following parameters to your Matlab 2013a shortcut:\r\n\r\n`matlab.exe -automation -desktop`\r\n\r\nThis will allow you to keep a Matlab session open while you connect and disconnect with Visual Studio. Then just access vars like so from inside of Visual Studio: \r\n\r\n`let xFromMatlab = Matlab.Vars.X`\r\n\r\nand to call a funciton:\r\n\r\n```let res = Matlab.Toolboxes.``matlab\\elfun``.nthroot(6.0, 2.0)```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}